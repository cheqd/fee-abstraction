// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeabstraction/absfee/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryHostChainConfigRequest struct {
	IbcDenom string `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
}

func (m *QueryHostChainConfigRequest) Reset()         { *m = QueryHostChainConfigRequest{} }
func (m *QueryHostChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostChainConfigRequest) ProtoMessage()    {}
func (*QueryHostChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{0}
}
func (m *QueryHostChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostChainConfigRequest.Merge(m, src)
}
func (m *QueryHostChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostChainConfigRequest proto.InternalMessageInfo

func (m *QueryHostChainConfigRequest) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

type QueryHostChainConfigRespone struct {
	HostChainConfig HostChainFeeAbsConfig `protobuf:"bytes,1,opt,name=host_chain_config,json=hostChainConfig,proto3" json:"host_chain_config" yaml:"host_chain_config"`
}

func (m *QueryHostChainConfigRespone) Reset()         { *m = QueryHostChainConfigRespone{} }
func (m *QueryHostChainConfigRespone) String() string { return proto.CompactTextString(m) }
func (*QueryHostChainConfigRespone) ProtoMessage()    {}
func (*QueryHostChainConfigRespone) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{1}
}
func (m *QueryHostChainConfigRespone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostChainConfigRespone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostChainConfigRespone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostChainConfigRespone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostChainConfigRespone.Merge(m, src)
}
func (m *QueryHostChainConfigRespone) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostChainConfigRespone) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostChainConfigRespone.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostChainConfigRespone proto.InternalMessageInfo

func (m *QueryHostChainConfigRespone) GetHostChainConfig() HostChainFeeAbsConfig {
	if m != nil {
		return m.HostChainConfig
	}
	return HostChainFeeAbsConfig{}
}

// QueryOsmosisSpotPriceRequest is the request type for the Query/Feeabs RPC
// method.
type QueryOsmosisArithmeticTwapRequest struct {
	IbcDenom string `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
}

func (m *QueryOsmosisArithmeticTwapRequest) Reset()         { *m = QueryOsmosisArithmeticTwapRequest{} }
func (m *QueryOsmosisArithmeticTwapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisArithmeticTwapRequest) ProtoMessage()    {}
func (*QueryOsmosisArithmeticTwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{2}
}
func (m *QueryOsmosisArithmeticTwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisArithmeticTwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisArithmeticTwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisArithmeticTwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisArithmeticTwapRequest.Merge(m, src)
}
func (m *QueryOsmosisArithmeticTwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisArithmeticTwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisArithmeticTwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisArithmeticTwapRequest proto.InternalMessageInfo

func (m *QueryOsmosisArithmeticTwapRequest) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

type QueryOsmosisArithmeticTwapResponse struct {
	ArithmeticTwap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=arithmetic_twap,json=arithmeticTwap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"arithmetic_twap" yaml:"arithmetic_twap"`
}

func (m *QueryOsmosisArithmeticTwapResponse) Reset()         { *m = QueryOsmosisArithmeticTwapResponse{} }
func (m *QueryOsmosisArithmeticTwapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOsmosisArithmeticTwapResponse) ProtoMessage()    {}
func (*QueryOsmosisArithmeticTwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{3}
}
func (m *QueryOsmosisArithmeticTwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOsmosisArithmeticTwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOsmosisArithmeticTwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOsmosisArithmeticTwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOsmosisArithmeticTwapResponse.Merge(m, src)
}
func (m *QueryOsmosisArithmeticTwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOsmosisArithmeticTwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOsmosisArithmeticTwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOsmosisArithmeticTwapResponse proto.InternalMessageInfo

// QueryFeeabsModuleBalacesRequest is the request type for the Query/Feeabs RPC
// method.
type QueryFeeabsModuleBalacesRequest struct {
}

func (m *QueryFeeabsModuleBalacesRequest) Reset()         { *m = QueryFeeabsModuleBalacesRequest{} }
func (m *QueryFeeabsModuleBalacesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeabsModuleBalacesRequest) ProtoMessage()    {}
func (*QueryFeeabsModuleBalacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{4}
}
func (m *QueryFeeabsModuleBalacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeabsModuleBalacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeabsModuleBalacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeabsModuleBalacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeabsModuleBalacesRequest.Merge(m, src)
}
func (m *QueryFeeabsModuleBalacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeabsModuleBalacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeabsModuleBalacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeabsModuleBalacesRequest proto.InternalMessageInfo

type QueryFeeabsModuleBalacesResponse struct {
	Balances github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=balances,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balances" yaml:"balances"`
	Address  string                                   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryFeeabsModuleBalacesResponse) Reset()         { *m = QueryFeeabsModuleBalacesResponse{} }
func (m *QueryFeeabsModuleBalacesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeabsModuleBalacesResponse) ProtoMessage()    {}
func (*QueryFeeabsModuleBalacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{5}
}
func (m *QueryFeeabsModuleBalacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeabsModuleBalacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeabsModuleBalacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeabsModuleBalacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeabsModuleBalacesResponse.Merge(m, src)
}
func (m *QueryFeeabsModuleBalacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeabsModuleBalacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeabsModuleBalacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeabsModuleBalacesResponse proto.InternalMessageInfo

func (m *QueryFeeabsModuleBalacesResponse) GetBalances() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryFeeabsModuleBalacesResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AllQueryHostChainConfigRequest struct {
}

func (m *AllQueryHostChainConfigRequest) Reset()         { *m = AllQueryHostChainConfigRequest{} }
func (m *AllQueryHostChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AllQueryHostChainConfigRequest) ProtoMessage()    {}
func (*AllQueryHostChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{6}
}
func (m *AllQueryHostChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllQueryHostChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllQueryHostChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllQueryHostChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllQueryHostChainConfigRequest.Merge(m, src)
}
func (m *AllQueryHostChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllQueryHostChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllQueryHostChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllQueryHostChainConfigRequest proto.InternalMessageInfo

type AllQueryHostChainConfigRespone struct {
	AllHostChainConfig []HostChainFeeAbsConfig `protobuf:"bytes,1,rep,name=all_host_chain_config,json=allHostChainConfig,proto3" json:"all_host_chain_config" yaml:"all_host_chain_config"`
}

func (m *AllQueryHostChainConfigRespone) Reset()         { *m = AllQueryHostChainConfigRespone{} }
func (m *AllQueryHostChainConfigRespone) String() string { return proto.CompactTextString(m) }
func (*AllQueryHostChainConfigRespone) ProtoMessage()    {}
func (*AllQueryHostChainConfigRespone) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3dde61db3cbb0e, []int{7}
}
func (m *AllQueryHostChainConfigRespone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllQueryHostChainConfigRespone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllQueryHostChainConfigRespone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllQueryHostChainConfigRespone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllQueryHostChainConfigRespone.Merge(m, src)
}
func (m *AllQueryHostChainConfigRespone) XXX_Size() int {
	return m.Size()
}
func (m *AllQueryHostChainConfigRespone) XXX_DiscardUnknown() {
	xxx_messageInfo_AllQueryHostChainConfigRespone.DiscardUnknown(m)
}

var xxx_messageInfo_AllQueryHostChainConfigRespone proto.InternalMessageInfo

func (m *AllQueryHostChainConfigRespone) GetAllHostChainConfig() []HostChainFeeAbsConfig {
	if m != nil {
		return m.AllHostChainConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryHostChainConfigRequest)(nil), "feeabstraction.absfee.v1beta1.QueryHostChainConfigRequest")
	proto.RegisterType((*QueryHostChainConfigRespone)(nil), "feeabstraction.absfee.v1beta1.QueryHostChainConfigRespone")
	proto.RegisterType((*QueryOsmosisArithmeticTwapRequest)(nil), "feeabstraction.absfee.v1beta1.QueryOsmosisArithmeticTwapRequest")
	proto.RegisterType((*QueryOsmosisArithmeticTwapResponse)(nil), "feeabstraction.absfee.v1beta1.QueryOsmosisArithmeticTwapResponse")
	proto.RegisterType((*QueryFeeabsModuleBalacesRequest)(nil), "feeabstraction.absfee.v1beta1.QueryFeeabsModuleBalacesRequest")
	proto.RegisterType((*QueryFeeabsModuleBalacesResponse)(nil), "feeabstraction.absfee.v1beta1.QueryFeeabsModuleBalacesResponse")
	proto.RegisterType((*AllQueryHostChainConfigRequest)(nil), "feeabstraction.absfee.v1beta1.AllQueryHostChainConfigRequest")
	proto.RegisterType((*AllQueryHostChainConfigRespone)(nil), "feeabstraction.absfee.v1beta1.AllQueryHostChainConfigRespone")
}

func init() {
	proto.RegisterFile("feeabstraction/absfee/v1beta1/query.proto", fileDescriptor_0a3dde61db3cbb0e)
}

var fileDescriptor_0a3dde61db3cbb0e = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x4f, 0xdb, 0x48,
	0x18, 0xcd, 0x80, 0x96, 0x85, 0x41, 0xda, 0x68, 0x47, 0xb0, 0xca, 0x06, 0xd6, 0x09, 0xa3, 0xd5,
	0x8a, 0x45, 0xd8, 0x2e, 0x69, 0xa5, 0xd2, 0x48, 0xa5, 0xf9, 0x81, 0x10, 0x97, 0xaa, 0x6a, 0xda,
	0x53, 0x2f, 0xd1, 0xd8, 0x99, 0x24, 0x56, 0x27, 0x1e, 0x93, 0x71, 0xa0, 0xb4, 0xea, 0x85, 0x7b,
	0xa5, 0x4a, 0x3d, 0xf4, 0xde, 0x63, 0x4f, 0x3d, 0xf6, 0x4f, 0x40, 0xa2, 0x07, 0xa4, 0x5e, 0xda,
	0x1e, 0xd2, 0x0a, 0xf8, 0x0b, 0xf8, 0x0b, 0x2a, 0xcf, 0x38, 0x81, 0x84, 0xe0, 0x44, 0xe9, 0x29,
	0xb1, 0xe6, 0x7d, 0xef, 0x7b, 0xef, 0xfb, 0x9e, 0xc7, 0xf0, 0xff, 0x2a, 0xa5, 0xc4, 0x12, 0x7e,
	0x93, 0xd8, 0xbe, 0xc3, 0x5d, 0x93, 0x58, 0xa2, 0x4a, 0xa9, 0xb9, 0xbb, 0x66, 0x51, 0x9f, 0xac,
	0x99, 0x3b, 0x2d, 0xda, 0xdc, 0x37, 0xbc, 0x26, 0xf7, 0x39, 0xfa, 0xa7, 0x17, 0x6a, 0x28, 0xa8,
	0x11, 0x42, 0x93, 0x73, 0x35, 0x5e, 0xe3, 0x12, 0x69, 0x06, 0xff, 0x54, 0x51, 0x72, 0xb1, 0xc6,
	0x79, 0x8d, 0x51, 0x93, 0x78, 0x8e, 0x49, 0x5c, 0x97, 0xfb, 0x24, 0xa8, 0x15, 0xe1, 0xe9, 0x4a,
	0x74, 0x77, 0x8f, 0x34, 0x49, 0xa3, 0x83, 0x35, 0xa2, 0xb1, 0x5c, 0x34, 0xb8, 0x70, 0x84, 0x63,
	0xd9, 0x21, 0x7e, 0x75, 0x08, 0x77, 0x93, 0x7b, 0x5c, 0x10, 0x16, 0xa2, 0x35, 0x5b, 0x12, 0x98,
	0x16, 0x11, 0x17, 0x18, 0x9b, 0x3b, 0xae, 0x3a, 0xc7, 0x59, 0xb8, 0xf0, 0x30, 0x98, 0xc5, 0x36,
	0x17, 0x7e, 0xb1, 0x4e, 0x1c, 0xb7, 0xc8, 0xdd, 0xaa, 0x53, 0x2b, 0xd1, 0x9d, 0x16, 0x15, 0x3e,
	0x5a, 0x80, 0x33, 0x8e, 0x65, 0x97, 0x2b, 0xd4, 0xe5, 0x8d, 0x04, 0x48, 0x83, 0xe5, 0x99, 0xd2,
	0xb4, 0x63, 0xd9, 0x9b, 0xc1, 0x33, 0x7e, 0x07, 0xae, 0x2b, 0x16, 0x1e, 0x77, 0x29, 0x3a, 0x00,
	0xf0, 0xcf, 0x3a, 0x17, 0x7e, 0xd9, 0x0e, 0xce, 0xca, 0xb6, 0x3c, 0x94, 0x2c, 0xb3, 0x99, 0x5b,
	0x46, 0xe4, 0xd4, 0x8d, 0x2e, 0xe5, 0x16, 0xa5, 0x79, 0x4b, 0x28, 0xe2, 0x42, 0xfa, 0xb0, 0x9d,
	0x8a, 0x9d, 0xb7, 0x53, 0x89, 0x7d, 0xd2, 0x60, 0x59, 0x7c, 0x85, 0x1c, 0x97, 0xe2, 0xf5, 0x5e,
	0x2d, 0x38, 0x07, 0x97, 0xa4, 0xc6, 0x07, 0x6a, 0x8e, 0xf9, 0xa6, 0xe3, 0xd7, 0x1b, 0xd4, 0x77,
	0xec, 0xc7, 0x7b, 0xc4, 0x1b, 0xc9, 0xe6, 0x5b, 0x00, 0x71, 0x14, 0x45, 0x60, 0x56, 0x50, 0xb4,
	0x03, 0xe3, 0xa4, 0x7b, 0x52, 0xf6, 0xf7, 0x88, 0xa7, 0x98, 0x0a, 0xdb, 0x81, 0xe8, 0x6f, 0xed,
	0xd4, 0x7f, 0x35, 0xc7, 0xaf, 0xb7, 0x2c, 0xc3, 0xe6, 0x0d, 0x33, 0xdc, 0x8a, 0xfa, 0xd1, 0x45,
	0xe5, 0xa9, 0xe9, 0xef, 0x7b, 0x54, 0x18, 0x9b, 0xd4, 0x3e, 0x6f, 0xa7, 0xfe, 0x52, 0xf6, 0xfa,
	0xe8, 0x70, 0xe9, 0x0f, 0xd2, 0xd3, 0x1a, 0x2f, 0xc1, 0x94, 0x14, 0xb6, 0x25, 0x47, 0x79, 0x9f,
	0x57, 0x5a, 0x8c, 0x16, 0x08, 0x23, 0x36, 0x15, 0xa1, 0x33, 0xfc, 0x11, 0xc0, 0xf4, 0xf5, 0x98,
	0x50, 0xfa, 0x73, 0x38, 0x6d, 0x11, 0x46, 0x5c, 0x9b, 0x8a, 0x04, 0x48, 0x4f, 0x2e, 0xcf, 0x66,
	0xfe, 0x36, 0x94, 0x34, 0x23, 0xc8, 0x4d, 0x77, 0x29, 0x45, 0xee, 0xb8, 0x85, 0x62, 0xb8, 0x83,
	0xb8, 0x12, 0xd9, 0x29, 0xc4, 0xef, 0xbf, 0xa7, 0x96, 0x47, 0x70, 0x18, 0x70, 0x88, 0x52, 0xb7,
	0x1f, 0x4a, 0xc0, 0xdf, 0x49, 0xa5, 0xd2, 0xa4, 0x42, 0x24, 0x26, 0xe4, 0xe0, 0x3b, 0x8f, 0x38,
	0x0d, 0xb5, 0x3c, 0x63, 0x11, 0xe9, 0xc4, 0x1f, 0x40, 0x04, 0x44, 0x65, 0xf0, 0x15, 0x80, 0xf3,
	0x84, 0xb1, 0xf2, 0xa0, 0x1c, 0x4e, 0x8e, 0x9d, 0xc3, 0x7f, 0xc3, 0x19, 0x2c, 0x86, 0x8b, 0x1a,
	0xd4, 0x00, 0x97, 0x10, 0x61, 0xac, 0x4f, 0x56, 0xe6, 0xeb, 0x14, 0xfc, 0x4d, 0xea, 0x45, 0x67,
	0x00, 0xce, 0x0f, 0x4c, 0x14, 0xca, 0x0d, 0xd1, 0x34, 0x34, 0xcf, 0xc9, 0xfc, 0x2f, 0x30, 0xa8,
	0x4c, 0xe0, 0xad, 0x83, 0xcf, 0x67, 0x6f, 0x26, 0x72, 0x68, 0xc3, 0xac, 0x52, 0xaa, 0x5f, 0xbe,
	0x70, 0x14, 0xb5, 0xb9, 0xdb, 0xbd, 0x9b, 0xf4, 0x8b, 0x58, 0xea, 0x41, 0x50, 0xcd, 0x17, 0xdd,
	0x97, 0xe9, 0x25, 0x3a, 0x02, 0x70, 0xae, 0x3f, 0x7b, 0x72, 0xf1, 0x1b, 0xa3, 0x68, 0xbc, 0x3e,
	0xd9, 0xc9, 0x7b, 0x63, 0xd7, 0x87, 0x0e, 0x33, 0xd2, 0xe1, 0x2a, 0x5a, 0x89, 0x70, 0xd8, 0x90,
	0x95, 0x7a, 0x37, 0xad, 0x47, 0x00, 0xc6, 0xfb, 0x56, 0x8a, 0xb2, 0xa3, 0x08, 0x19, 0x9c, 0xe0,
	0xe4, 0x78, 0xb5, 0x32, 0xda, 0x38, 0x27, 0xf5, 0x67, 0xd1, 0x7a, 0x84, 0xfe, 0x20, 0x95, 0xba,
	0x4c, 0xa5, 0xae, 0x52, 0xd9, 0xb3, 0x9b, 0x4f, 0x00, 0xa2, 0xfc, 0x95, 0x8c, 0xa2, 0xbb, 0x43,
	0x44, 0x45, 0xbf, 0x95, 0xc9, 0xb1, 0xcb, 0x95, 0xad, 0x75, 0x69, 0x2b, 0x83, 0x6e, 0x44, 0xd8,
	0x22, 0x8c, 0xe9, 0x57, 0xac, 0x15, 0x1e, 0x1d, 0x9e, 0x68, 0xe0, 0xf8, 0x44, 0x03, 0x3f, 0x4e,
	0x34, 0xf0, 0xfa, 0x54, 0x8b, 0x1d, 0x9f, 0x6a, 0xb1, 0x2f, 0xa7, 0x5a, 0xec, 0xc9, 0x9d, 0x4b,
	0x17, 0x53, 0x27, 0xb4, 0x2c, 0xe0, 0xea, 0x6f, 0xb1, 0x7b, 0xdb, 0x7c, 0xd6, 0xe9, 0x23, 0xef,
	0x2b, 0x6b, 0x4a, 0x7e, 0x27, 0x6f, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xce, 0xd8, 0xd5, 0x08,
	0x51, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// OsmosisSpotPrice return spot price of pair Osmo/nativeToken
	OsmosisArithmeticTwap(ctx context.Context, in *QueryOsmosisArithmeticTwapRequest, opts ...grpc.CallOption) (*QueryOsmosisArithmeticTwapResponse, error)
	// FeeabsModuleBalances return total balances of feeabs module
	FeeabsModuleBalances(ctx context.Context, in *QueryFeeabsModuleBalacesRequest, opts ...grpc.CallOption) (*QueryFeeabsModuleBalacesResponse, error)
	HostChainConfig(ctx context.Context, in *QueryHostChainConfigRequest, opts ...grpc.CallOption) (*QueryHostChainConfigRespone, error)
	AllHostChainConfig(ctx context.Context, in *AllQueryHostChainConfigRequest, opts ...grpc.CallOption) (*AllQueryHostChainConfigRespone, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OsmosisArithmeticTwap(ctx context.Context, in *QueryOsmosisArithmeticTwapRequest, opts ...grpc.CallOption) (*QueryOsmosisArithmeticTwapResponse, error) {
	out := new(QueryOsmosisArithmeticTwapResponse)
	err := c.cc.Invoke(ctx, "/feeabstraction.absfee.v1beta1.Query/OsmosisArithmeticTwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeabsModuleBalances(ctx context.Context, in *QueryFeeabsModuleBalacesRequest, opts ...grpc.CallOption) (*QueryFeeabsModuleBalacesResponse, error) {
	out := new(QueryFeeabsModuleBalacesResponse)
	err := c.cc.Invoke(ctx, "/feeabstraction.absfee.v1beta1.Query/FeeabsModuleBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostChainConfig(ctx context.Context, in *QueryHostChainConfigRequest, opts ...grpc.CallOption) (*QueryHostChainConfigRespone, error) {
	out := new(QueryHostChainConfigRespone)
	err := c.cc.Invoke(ctx, "/feeabstraction.absfee.v1beta1.Query/HostChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllHostChainConfig(ctx context.Context, in *AllQueryHostChainConfigRequest, opts ...grpc.CallOption) (*AllQueryHostChainConfigRespone, error) {
	out := new(AllQueryHostChainConfigRespone)
	err := c.cc.Invoke(ctx, "/feeabstraction.absfee.v1beta1.Query/AllHostChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// OsmosisSpotPrice return spot price of pair Osmo/nativeToken
	OsmosisArithmeticTwap(context.Context, *QueryOsmosisArithmeticTwapRequest) (*QueryOsmosisArithmeticTwapResponse, error)
	// FeeabsModuleBalances return total balances of feeabs module
	FeeabsModuleBalances(context.Context, *QueryFeeabsModuleBalacesRequest) (*QueryFeeabsModuleBalacesResponse, error)
	HostChainConfig(context.Context, *QueryHostChainConfigRequest) (*QueryHostChainConfigRespone, error)
	AllHostChainConfig(context.Context, *AllQueryHostChainConfigRequest) (*AllQueryHostChainConfigRespone, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OsmosisArithmeticTwap(ctx context.Context, req *QueryOsmosisArithmeticTwapRequest) (*QueryOsmosisArithmeticTwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OsmosisArithmeticTwap not implemented")
}
func (*UnimplementedQueryServer) FeeabsModuleBalances(ctx context.Context, req *QueryFeeabsModuleBalacesRequest) (*QueryFeeabsModuleBalacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeabsModuleBalances not implemented")
}
func (*UnimplementedQueryServer) HostChainConfig(ctx context.Context, req *QueryHostChainConfigRequest) (*QueryHostChainConfigRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostChainConfig not implemented")
}
func (*UnimplementedQueryServer) AllHostChainConfig(ctx context.Context, req *AllQueryHostChainConfigRequest) (*AllQueryHostChainConfigRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllHostChainConfig not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OsmosisArithmeticTwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOsmosisArithmeticTwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OsmosisArithmeticTwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeabstraction.absfee.v1beta1.Query/OsmosisArithmeticTwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OsmosisArithmeticTwap(ctx, req.(*QueryOsmosisArithmeticTwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeabsModuleBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeabsModuleBalacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeabsModuleBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeabstraction.absfee.v1beta1.Query/FeeabsModuleBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeabsModuleBalances(ctx, req.(*QueryFeeabsModuleBalacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeabstraction.absfee.v1beta1.Query/HostChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostChainConfig(ctx, req.(*QueryHostChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllHostChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllQueryHostChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllHostChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeabstraction.absfee.v1beta1.Query/AllHostChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllHostChainConfig(ctx, req.(*AllQueryHostChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feeabstraction.absfee.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OsmosisArithmeticTwap",
			Handler:    _Query_OsmosisArithmeticTwap_Handler,
		},
		{
			MethodName: "FeeabsModuleBalances",
			Handler:    _Query_FeeabsModuleBalances_Handler,
		},
		{
			MethodName: "HostChainConfig",
			Handler:    _Query_HostChainConfig_Handler,
		},
		{
			MethodName: "AllHostChainConfig",
			Handler:    _Query_AllHostChainConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeabstraction/absfee/v1beta1/query.proto",
}

func (m *QueryHostChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHostChainConfigRespone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostChainConfigRespone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostChainConfigRespone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisArithmeticTwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisArithmeticTwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisArithmeticTwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOsmosisArithmeticTwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOsmosisArithmeticTwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOsmosisArithmeticTwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ArithmeticTwap.Size()
		i -= size
		if _, err := m.ArithmeticTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeabsModuleBalacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeabsModuleBalacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeabsModuleBalacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeabsModuleBalacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeabsModuleBalacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeabsModuleBalacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllQueryHostChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllQueryHostChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllQueryHostChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllQueryHostChainConfigRespone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllQueryHostChainConfigRespone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllQueryHostChainConfigRespone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllHostChainConfig) > 0 {
		for iNdEx := len(m.AllHostChainConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllHostChainConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHostChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHostChainConfigRespone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostChainConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOsmosisArithmeticTwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOsmosisArithmeticTwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ArithmeticTwap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeabsModuleBalacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeabsModuleBalacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllQueryHostChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllQueryHostChainConfigRespone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllHostChainConfig) > 0 {
		for _, e := range m.AllHostChainConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHostChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostChainConfigRespone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostChainConfigRespone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostChainConfigRespone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisArithmeticTwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisArithmeticTwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisArithmeticTwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOsmosisArithmeticTwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOsmosisArithmeticTwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOsmosisArithmeticTwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArithmeticTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ArithmeticTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeabsModuleBalacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeabsModuleBalacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeabsModuleBalacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeabsModuleBalacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeabsModuleBalacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeabsModuleBalacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, types.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllQueryHostChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllQueryHostChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllQueryHostChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllQueryHostChainConfigRespone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllQueryHostChainConfigRespone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllQueryHostChainConfigRespone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllHostChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllHostChainConfig = append(m.AllHostChainConfig, HostChainFeeAbsConfig{})
			if err := m.AllHostChainConfig[len(m.AllHostChainConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
